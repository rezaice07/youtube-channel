

Database Auditing:

-let's check the unified auditing info by 
SQL Dev : 
select *from v$option
where parameter = 'Unified Auditing';

--Output: Unified Auditing	FALSE	0

Unified Audit Enable Process:
1. SQL> SHUTDOWN IMMEDIATE
2. grid: lsnrctl stop
3. login with oracle user and use the following commands...
	cd $ORACLE_HOME/rdbms/lib
	make -f ins_rdbms.mk uniaud_on ioracle ORACLE_HOME=$ORACLE_HOME
4. lsnrctl start
5. STARTUP 


-let's check the unified auditing info by 
SQL Dev : 
select *from v$option
where parameter = 'Unified Auditing';

--Output: Unified Auditing	TRUE	0

Configuring Audit Policy:
------------------------

--audit_unified_enabled_policies info
SELECT * FROM audit_unified_enabled_policies;

Output:
ORA_SECURECONFIG	BY USER	ALL USERS	USER	YES	YES
ORA_LOGON_FAILURES	BY USER	ALL USERS	USER	NO	YES

Disable Audit Policy
#######################
NOAUDIT POLICY ORA_SECURECONFIG ;
NOAUDIT POLICY ORA_LOGON_FAILURES ;

Finally Drop Audit Policy
###########################
DROP AUDIT POLICY ORA_SECURECONFIG ;
DROP AUDIT POLICY ORA_LOGON_FAILURES ;


--check audit_unified_enabled_policies
SELECT * FROM audit_unified_enabled_policies;

--let's create audit policy

CREATE AUDIT POLICY DBA167_ACTION_AUDIT_POLICY 
ACTIONS 
ALTER FUNCTION,
ALTER PACKAGE,
ALTER PACKAGE BODY,
ALTER PROCEDURE,
ALTER SYSTEM,
ALTER USER,
ALTER TABLE,
CREATE FUNCTION,
CREATE PACKAGE,
CREATE PACKAGE BODY,
CREATE PROCEDURE,
CREATE USER,
CREATE TABLE,
DROP TABLE,
DROP FUNCTION,
DROP PACKAGE,
DROP PACKAGE BODY, 
DROP PROCEDURE,
DROP ROLE,
DROP TRIGGER,
DROP USER,
LOGOFF,
LOGON
/

-let's enable audit policy

SQL> AUDIT POLICY DBA167_ACTION_AUDIT_POLICY ;


--check audit policy
SQL> select * from audit_unified_policies 
where policy_name in (select policy_name 
					 from audit_unified_enabled_policies) 
order by policy_name, audit_option;


--check on audit trail
SQL> select * from UNIFIED_AUDIT_TRAIL;


connect hr

SQL> conn hr/hr
Connected.
SQL> create table testaud (id number ,name varchar2(50));

Table created.

SQL> alter table testaud add dob date;

Table altered.

SQL> drop table testaud;

Table dropped.


--check on audit trail
SQL> select * from UNIFIED_AUDIT_TRAIL
where dbusername='HR'
order by EVENT_TIMESTAMP desc;

--create a tablespace for audit
CREATE TABLESPACE AUDITTAB DATAFILE SIZE 200M;

--let's set this above tablespace to audit_trail_location_value
BEGIN
DBMS_AUDIT_MGMT.set_audit_trail_location(
audit_trail_type => DBMS_AUDIT_MGMT.AUDIT_TRAIL_AUD_STD,
audit_trail_location_value => 'AUDITTAB');
END;
/


--let's check 'AUD$', 'FGA_LOG$' tables for tablespace
select table_name, tablespace_name from dba_tables where table_name in ('AUD$', 'FGA_LOG$')


--but fga audit not going to AUDITTAB. let's do that one...
BEGIN
DBMS_AUDIT_MGMT.set_audit_trail_location(
audit_trail_type => DBMS_AUDIT_MGMT.AUDIT_TRAIL_FGA_STD,
audit_trail_location_value => 'AUDITTAB');
END;
/

--let's check 'AUD$', 'FGA_LOG$' tables for tablespace
select table_name, tablespace_name from dba_tables where table_name in ('AUD$', 'FGA_LOG$')

AUDIT PURGE
###############

delete for specific Audit records
##################################
select count(*) from unified_audit_trail;

--pointer set to delete all except last 30 days
exec dbms_audit_mgmt.set_last_archive_timestamp(audit_trail_type=>dbms_audit_mgmt.audit_trail_unified,last_archive_time=>sysdate-30); --delete all except last 30 days

--this is delete operation
exec dbms_audit_mgmt.clean_audit_trail(audit_trail_type=>dbms_audit_mgmt.audit_trail_unified,use_last_arch_timestamp=>TRUE);

delete All Audit records
##################################
select count(*) from unified_audit_trail;
exec DBMS_AUDIT_MGMT.CLEAN_AUDIT_TRAIL(audit_trail_type=>DBMS_AUDIT_MGMT.AUDIT_TRAIL_UNIFIED,use_last_arch_timestamp=>FALSE);--Delete All audit record from unified
select count(*) from unified_audit_trail;


Value Based Audit
###################

Trigger
########

Trigger?

Trigger Type
############
  Database Trigger
  Application Trigger

Database Trigger
#################
    Statement Trigger
    Row Trigger
    Instead of trigger (Based on View only)


Trigger Timing (Before / After)
Trigger Event
   DML- INSERT, UPDATE, DELETE
   SYSTEM- LOGON, LOGOFF, SHUTDOWN, STARTUP , SERVERERROR
   DDL EVENT- DROP, ALTER , CREATE ETC
Trigger Object
   - TABLE, view
TRIGGER BODY


create or replace trigger emp_protect_trigg
before insert or update or delete on hr.employees
begin
 if to_char(sysdate,'Dy') ='Sat' then
  raise_application_error(-20001,'Today is holiday, so you can''t able to DML on Employees Table...');
end if;
end;
/


date -s "15 JUL 2022 18:42:00"

--let's create a trigger for value based
create or replace trigger emp_protect_trigg
before insert or update or delete on hr.employees
for each row
begin
 if to_char(sysdate,'Dy') ='Sat' then
  raise_application_error(-20001,'Today is holiday, so you can''t able to DML on Employees Table...');
end if;
end;
/


create table hr.emp
(id number,
name varchar2(30),
sal number
)
/

create table sys.emp_logg
(
newid number,
oldid number,
newname varchar2(30),
oldname varchar2(30),
newsal number,
oldsal number,
accuser varchar2(30),
acctime timestamp(2),
accterminal varchar2(30)
)
/



create or replace trigger sys.emp_aud_trigg
after insert or update or delete on hr.emp
for each row
begin
insert into sys.emp_logg
values(
:new.id,
:old.id,
:new.name,
:old.name,
:new.sal,
:old.sal,
user,
sysdate,
SYS_CONTEXT ('USERENV', 'IP_ADDRESS') 
);
end;
/



FGA (Fine-Grained Auditing)
-------------------------

begin
dbms_fga.add_policy (
 object_schema	=> 	'HR',
 object_name		=> 	'EMPLOYEES',
 policy_name	=> 	'audit_emps_salary',
 audit_condition=>	'department_id=10',
 audit_column 	=> 'SALARY,COMMISSION_PCT',
 handler_schema	=> 	'secure',
 handler_module	=> 	'log_emps_salary',
 enable			=> 	TRUE,
 statement_types =>	'SELECT,UPDATE');
end;
/


BEGIN
  DBMS_FGA.add_policy(
    object_schema   => 'HR',
    object_name     => 'EMPLOYEES',
    policy_name     => 'SALARY_CHK_AUDIT2',
    audit_condition => 'SALARY > 10000',
    audit_column    => 'SALARY'),
	statement_types =>	'SELECT,UPDATE');
END;
/