
Using New & Old Qualifiers in Triggers
----------------------------------------------

--FIRST WE NEED TO DISABLE THE EXISTING TRIGGER TRG_EMPLOYEES

ALTER TABLE EMPLOYEE_COPY DISABLE ALL TRIGGERS;

--LET'S CREATE THE NEW TRIGGER FOR AFTER EVENT TO CHECK OLD AND NEW VALUE
/
CREATE OR REPLACE TRIGGER TRG_EMPLOYEES_OLD_NEW AFTER
  INSERT OR
  UPDATE OR
  DELETE ON EMPLOYEE_COPY 
  FOR EACH ROW
  BEGIN 
  DBMS_OUTPUT.PUT_LINE('Before row trigger is fired.');
  DBMS_OUTPUT.PUT_LINE('Old Salary '||:old.salary || '; new slaary '|| :new.salary);
END TRG_EMPLOYEES_OLD_NEW;


--NOW WE WILL UPDATE SOME VALUES
/
UPDATE EMPLOYEE_COPY SET SALARY = SALARY + 100
WHERE EMPLOYEE_ID=101;

/
DELETE FROM EMPLOYEE_COPY
WHERE EMPLOYEE_ID=101;

/
SELECT *FROM EMPLOYEE_COPY
WHERE EMPLOYEE_ID=101;

/

SET SERVEROUTPUT ON;




--REFERENCING OLD AND NEW
/
CREATE OR REPLACE TRIGGER TRG_EMPLOYEES_OLD_NEW AFTER
  INSERT OR
  UPDATE OR
  DELETE ON EMPLOYEE_COPY 
  REFERENCING OLD AS O NEW AS N
  FOR EACH ROW
  BEGIN 
  DBMS_OUTPUT.PUT_LINE('Before row trigger is fired.');
  DBMS_OUTPUT.PUT_LINE('Old Salary '||:O.salary || '; new slaary '|| :N.salary);
END TRG_EMPLOYEES_OLD_NEW;


--NOW WE WILL UPDATE SOME VALUES
/
UPDATE EMPLOYEE_COPY SET SALARY = SALARY + 100
WHERE EMPLOYEE_ID=101;

/
DELETE FROM EMPLOYEE_COPY
WHERE EMPLOYEE_ID=101;

/
SELECT *FROM EMPLOYEE_COPY
WHERE EMPLOYEE_ID=101;

/

SET SERVEROUTPUT ON;