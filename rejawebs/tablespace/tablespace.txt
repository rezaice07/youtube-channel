
Tablespace:
	When a table is created, a segment is created to hold its data.
	A tablespace contains collection of segments.
	
	Logically, when a tablespace is created, a extent is allocated.
	a extent contains 8 numbers of block.
	Each Block is 8 KB size, So that a extent size is 8x8=64KB
	
	Physically, when a tablespace is created, a datafile also created and it is physical.
	If we consider the datafile size is 100MB, Means it will create 100MB OS block to store data.
	
	[IMAGE]How table data is stored
	[IMAGE]Database block: content
	
	-Check database status
	[oracle@dba167 ~]$ srvctl status database -d dba167
	
	
-let's check tablespace info[SQL DEVELOPER]
select *from v$tablespace;
select *from dba_tablespaces;

Tablespace Type:
  Permanent Tablespace
  UNDO Tablespace
  Temp Tablespace

Permanent Tablespace
####################################
Tablespace may be
  BIG FILE tablespace - 1 file exist and max size is 128 TB
  Small File Tablespace (Default)- Multiple datafile can create and max size of each datafile is 32 GB
  
  -let's create table space
  -let's check datafiles
  select * from v$datafile;
  select * from dba_data_files;
  select *From v$asm_diskgroup;
  
  
  --now create a tablespace with the name of TestTab1
  create tablespace TestTab1
  --datafile <location and filename>
  datafile '+DATA/DBA167/DATAFILE/TestTab101.dbf' 
  size 100M 
  autoextend on;
  
 Manual: Datafile name, location and size.
 Auto  : OMF - Oracle managed file
 
 Note: If we don't specify the datafile location then the file name will be generated by OMF.
 -let's see the create parameter
	SQL> show parameter create

	NAME                                 TYPE        VALUE
	------------------------------------ ----------- ------------------------------
	create_bitmap_area_size              integer     8388608
	create_stored_outlines               string
	db_create_file_dest                  string      +DATA
	db_create_online_log_dest_1          string
	db_create_online_log_dest_2          string
	db_create_online_log_dest_3          string
	db_create_online_log_dest_4          string
	db_create_online_log_dest_5          string

 -let's see OMF
 create tablespace testtab2;
 
 -So, the location of the file will be created by using the create parameter "db_create_file_dest"
 
 --note: default space is 100 MB and will be auto extend
 
  create tablespace testtab3 size 200MB;
  --Note: not auto extend
  
  - OMF is recommendated by oracle
  
  -if you want to change to tablespace properties
  alter database datafile "Data_file_location" autoextend on
  
  -let's add another datafile for a tablespace
  -first we need to create a tablespace
	create tablespace TestTab4 
	datafile '+DATA/DBA167/DATAFILE/TestTab4.dbf'
	size 10M 
	autoextend on;

	-let's add another datafile for a tablespace
	alter tablespace TestTab4  
	add datafile '+DATA/DBA167/DATAFILE/TestTab401.dbf' 
	size 10M 
	autoextend on;
	
	-resizing datafile by 
	alter database datafile '+DATA/DBA167/DATAFILE/TestTab401.dbf' resize 30MB;
	
	--tablespace by default a user
	SQL> alter user A default tablespace TestTab4
		
	-tablespace by unlimited grant privilege
	SYS: SQL> grant unlimited tablespace to A
	
	-let's create a table by user A
	A:SQL> create table a.t3(id number ) tablespace TestTab4;
	
	A:SQL>insert into a.t3 values(1);
	
	A:SQL>Commit;
	
	--User also can access to another tablespace by QUOTA	
	SYS: SQL>revoke unlimited tablespace to A	
	SYS: SQL>alter user A QUOTA 10M on Testtab2;
	
	-let's create a table by user A
	A:SQL> create table t2(id number ) tablespace Testtab2;
	
	A:SQL>insert into t2 values(1);
	
	A:SQL>Commit;
	
	--So that, Tablespace accessed by user
		-default tablespace
		-By Quota permission.
		
UNDO Tablespace
###############
-Why undo tablespace?
If we have any changes like update record 5000 instead of 4000 and if we need to rollback. So where the data will be rollback.
Hence the undo tablespace stored those data.

-How to create the undow tablespace?
CREATE UNDO TABLESPACE 	TestUNDO
datafile '+DATA/DBA167/DATAFILE/TestUNDO.dbf'
size 100M
autoextend on;

-How to we set defult undo tablespace?
Let's see the undo parameter values?
SQL> show parameter undo

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
temp_undo_enabled                    boolean     FALSE
undo_management                      string      AUTO
undo_retention                       integer     900
undo_tablespace                      string      UNDOTBS1

-now we'll set undo tablespace
SQL> alter system set undo_tablespace='TESTUNDO';

System altered.

Let's see the undo parameter values?
SQL> show parameter undo

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
temp_undo_enabled                    boolean     FALSE
undo_management                      string      AUTO
undo_retention                       integer     900
undo_tablespace                      string      TESTUNDO


TEMP tablespace
###############
-Why TEMP tablespace?
Tem tablespace will contain sorting, grouping related data

-How to create the undow tablespace?

--let's check first the temp file location
select *From v$tempfile;
--+DATA/DBA167/TEMPFILE/temp.265.1106721901

CREATE TEMPORARY TABLESPACE 	TESTTEMP
tempfile '+DATA/DBA167/TEMPFILE/TESTTEMP.dbf'
size 100M
autoextend on;

-How to we set defult temp tablespace?
Let's see the temp parameter values?
SQL>select *from database_properties 
where PROPERTY_NAME='DEFAULT_TEMP_TABLESPACE';

-now set the tablespace name
alter database default temporary tablespace TESTTEMP

now check again 
SQL>select *from database_properties 
where PROPERTY_NAME='DEFAULT_TEMP_TABLESPACE';


-dropping tablespace
-let's create a new tablespace
SYS: SQL> create tablespace tabsp

-to drop empty or fresh tablespace
SYS: SQL> DROP TABLESPACE 

-If you have contents like table or table data
SYS: SQL> create tablespace tabsp
SYS: SQL> alter user A QUOtA 10M on tabsp;

A: SQL>create table testTable(id number) tablespace tabsp;

A: SQL>insert into testTable values(1);

A: SQL>commit;

SYS: SQL> drop tablespace tabsp;

-it will show error messages. So we can resolve this issue by using
SYS: SQL> drop tablespace tabsp INCLUDING CONTENTS and datafiles;


Relocating/Remaning an online datafile
########################################

SYS: SQL> select *from v$datafile;

--make directory to 
ASMCMD> cd +FRA/DBA167/
ASMCMD> mkdir DATAFILE


SQL> alter database move datafile '+DATA/DBA167/DATAFILE/testtab401.dbf' to '+FRA/DBA167/DATAFILE/testtab401.dbf';

Database altered.


Copying a datafile from a file system to ASM
############################################
--make directory to FRA/DBA167/Backup_DATAFILE
mkdir FRA/DBA167/Backup_DATAFILE
alter database move datafile '+DATA/DBA167/DATAFILE/testundo.dbf' to '+FRA/DBA167/Backup_DATAFILE/testundo.dbf' KEEP;


Block space Management
######################

When we create a table, pctfree = 10 means by default 10 % space will free of total full block space.
So this 10 % block space never be used for insert purpose but can be used for update purpose.

let's see in the creation script..
DROP TABLE A.A CASCADE CONSTRAINTS;

CREATE TABLE A.A
(
  ID  NUMBER
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;

Type of Segments
################
Segments are dynamacally allocated by the oracle database server

let's check segment types
SQL> select distinct segment_type from dba_segments;


Shrinking Database
##################

-let's create a big table from dba_objects
SQL> create table a.big as select *from dba_objects

-Now we will observe segment for segment BIG
select *From dba_segments where owner='A' and segment_name='BIG'

select segment_name,bytes, bytes/1024/1024 MB From dba_segments where owner='A' and segment_name='BIG'

select count(*) from a.big;

delete from a.big where owner='SYS'

commit;

--Now see the status of BIG segemtn after deleting data.
select segment_name,bytes, bytes/1024/1024 MB From dba_segments where owner='A' and segment_name='BIG';
--but no segment space declined.

--now check ROW_MOVEMENT status for BIG table
select dt.ROW_MOVEMENT  from dba_tables dt where table_name='BIG';

--now enable row movement for big table
alter table a.big enable row movement;

--note: if we don't have enable row movement it will show an error while executing below lines
--shrink table:
alter table a.big shrink space compact;

-Now we will observe segment for segment BIG
select segment_name,bytes, bytes/1024/1024 MB From dba_segments where owner='A' and segment_name='BIG';

--no change made
--Now will execute below lines to shrink table space
alter table a.big shrink space;

-let's disable row movement
alter table a.big disable row movement;




--generating script for shrinking database tables
select 'alter table '||owner||'.'||table_name||' enable row movement;'
from dba_tables
where owner='A';

--output
alter table A.A enable row movement;
alter table A.BIG enable row movement;
alter table A.TESTTAB enable row movement; 

select 'alter table '||owner||'.'||table_name||' shrink space compact;'
from dba_tables
where owner='A';

--output
alter table A.A shrink space compact;
alter table A.BIG shrink space compact;
alter table A.TESTTAB shrink space compact;


select 'alter table '||owner||'.'||table_name||' shrink space;'
from dba_tables
where owner='A';

--output
alter table A.A shrink space;
alter table A.BIG shrink space;
alter table A.TESTTAB shrink space;


select 'alter table '||owner||'.'||table_name||' disable row movement;'
from dba_tables
where owner='A';

--output
alter table A.A disable row movement;
alter table A.BIG disable row movement;
alter table A.TESTTAB disable row movement;


--Let's run the script
set lines 400 pages 100
set scho on 
set feedback on 
spool shrinkObjects.spl

alter table A.A enable row movement;
alter table A.BIG enable row movement;
alter table A.TESTTAB enable row movement; 

alter table A.A shrink space compact;
alter table A.BIG shrink space compact;
alter table A.TESTTAB shrink space compact;

alter table A.A shrink space;
alter table A.BIG shrink space;
alter table A.TESTTAB shrink space;

alter table A.A disable row movement;
alter table A.BIG disable row movement;
alter table A.TESTTAB disable row movement;

spool off
exit

[oracle@dba167]$ mkdir scripts
[oracle@dba167]$ cd scripts
[oracle@dba167 scripts]$ vi ShrinkObjects.txt
--then copy and paste the above scripts and save it on vi mode

-now execute the script
[oracle@dba167 scripts]$ sqlplus / as sysdba @ShrinkObjects.txt

[oracle@dba167 scripts]$ ls -larth
total 16K
-rw-r--r--.  1 oracle oinstall  560 Jul 19 14:40 ShrinkObjects.txt
-rw-r--r--.  1 oracle oinstall 4.0K Jul 19 14:40 .ShrinkObjects.txt.swp
drwx------. 20 oracle oinstall 4.0K Jul 19 14:40 ..
drwxr-xr-x.  2 oracle oinstall   86 Jul 19 15:09 .
-rw-r--r--.  1 oracle oinstall  204 Jul 19 15:09 shrinkObjects.spl

--lets see the logs
[oracle@dba167 scripts]$ vi shrinkObjects.spl
































	
	
	
	

 
 

	
