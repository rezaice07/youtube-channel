
Variables
############
There are 4 types of variables

01. Scalar: a single value with one type. It's a basic and simple type. and also known as simple datatype.
	char(max_length)
	varchar2(max_length)
	number(precision,scale)
	binary_integer
	binary_float
	binary_double
	boolean
	date
	timestamp(precision)
	timestamp(p)withtimezone
	timestamp(p)with local timezone
	interval(p)year to month
	interval(p) day to second(p)
	
02. Reference: Reference datatypes hold value which point to a storage location. and simply called as pointers.


03. Large Objects(LOBs): are aslo pointers to other data items that are stored outside of the table such as images, files, etc.

04. Composite: is generally called as collections or records. so it can store more than one value.


WORKING WITH VARIABLE
########################

--EXAMPLE - 01

SET SERVEROUTPUT ON;
--NOTE: ITS NEEDED ONLY PER SESSION. SO, AFTER EXECUTING ONCE, THEN WE DON'T NEED TO EXECUTE IT AGAIN.
declare 
  V_TEXT VARCHAR2(50) NOT NULL DEFAULT 'HELLO';
BEGIN
  --LET'S ASSIGN A VARIABLE VALUE
  V_TEXT := 'HELLO PL/SQL' || ' COURSE';
  DBMS_OUTPUT.PUT_LINE(V_TEXT || ' BEGINNER TO ADVANCED');

END;


--EXAMPLE - 01
declare   
  V_TEXT VARCHAR2(50) NOT NULL := 'HELLO PL/SQL' || ' COURSE';
BEGIN
  --LET'S ASSIGN A VARIABLE VALUE  
  DBMS_OUTPUT.PUT_LINE(V_TEXT || ' BEGINNER TO ADVANCED');

END;



WORKING WITH NUMBER
#########################

--EXAMPLE - 01
DECLARE   
  V_NUMBER NUMBER NOT NULL := 50.42;
BEGIN 
  DBMS_OUTPUT.PUT_LINE(V_NUMBER || ' BEGINNER TO ADVANCED');
END;

--OUTPUT: 50.42 BEGINNER TO ADVANCED

--EXAMPLE - 02
DECLARE   
  V_NUMBER NUMBER(4) NOT NULL := 50.42;
BEGIN 
  DBMS_OUTPUT.PUT_LINE(V_NUMBER || ' BEGINNER TO ADVANCED');
END;
--50 BEGINNER TO ADVANCED

--EXAMPLE - 03
DECLARE   
  V_NUMBER NUMBER(4,2) NOT NULL := 50.42;
BEGIN 
  DBMS_OUTPUT.PUT_LINE(V_NUMBER || ' BEGINNER TO ADVANCED');
END;
--50.42 BEGINNER TO ADVANCED


--EXAMPLE - 04
DECLARE   
  V_NUMBER NUMBER(7,5) NOT NULL := 50.45555555555555;
BEGIN 
  DBMS_OUTPUT.PUT_LINE(V_NUMBER || ' BEGINNER TO ADVANCED');
END;
--50.45556 BEGINNER TO ADVANCED


SET SERVEROUTPUT ON;

--DESC HR.EMPLOYEES
--SELECT LAST_NAME FROM EMPLOYEES WHERE EMPLOYEE_ID=100

DECLARE 
  V_EMPLOYEE_NAME VARCHAR2(50); 
  
BEGIN
  SELECT LAST_NAME INTO V_EMPLOYEE_NAME FROM HR.EMPLOYEES WHERE ROWNUM=1; --EMPLOYEE_ID=100;
  DBMS_OUTPUT.PUT_LINE(V_EMPLOYEE_NAME);

END;

--WORKING WITH PLS_INTEGER
DECLARE 
  V_NUMBER PLS_INTEGER NOT NULL :=50;
  
BEGIN

  DBMS_OUTPUT.PUT_LINE(V_NUMBER);

END;
/


--WORKING WITH BINARY_FLOAT
DECLARE 
  V_NUMBER BINARY_FLOAT NOT NULL :=50.523F;
  --DON'T NEED TO SPECIFY THE PRECISION AND SCALE
BEGIN

  DBMS_OUTPUT.PUT_LINE(V_NUMBER);

END;
/



--WORKING WITH DATE
DECLARE 
  V_DATE DATE NOT NULL :=SYSDATE;
BEGIN

  DBMS_OUTPUT.PUT_LINE(V_DATE);

END;
/



--WORKING WITH DATE
DECLARE 
  V_DATE DATE NOT NULL :=SYSDATE;
BEGIN

  DBMS_OUTPUT.PUT_LINE(V_DATE);

END;
/

--WORKING WITH TIMESTAMP;
DECLARE 
  V_TIMESTAMP TIMESTAMP NOT NULL :=SYSTIMESTAMP;  
BEGIN

  DBMS_OUTPUT.PUT_LINE(V_TIMESTAMP);

END;
/

--WORKING WITH TIMESTAMP;
DECLARE 
  V_TIMESTAMP TIMESTAMP(3) NOT NULL :=SYSTIMESTAMP;
  --IN TIME PART, THIS 3 MEANS MEANS 3 DIGITS OF MILISECONDS
BEGIN

  DBMS_OUTPUT.PUT_LINE(V_TIMESTAMP);

END;
/



--WORKING WITH BOOLEAN;
DECLARE 
  V_BOOLEAN BOOLEAN := TRUE;  
BEGIN
  DBMS_OUTPUT.PUT_LINE(V_BOOLEAN);
END;
/

--NOTE: WE HAVE SEEN ERRORS. BECAUSE THE BOOLEAN IS NOT ABLE TO PRINT AND CAN BE USED FOR CONDITIONAL STATEMENT LIKE IF.


-- WORKING WITH %TYPE VARIABLE
-- IT IS A REFERENCE TYPE VARIABLE OR ATTRIBUTE TO STORE DATE DYNAMICALL WITH RESPECT TO OTHER VARAIBLE OR TABLE COLUMN.
-- DESC EMPLOYEES
DECLARE 
  V_TYPE HR.EMPLOYEES.LAST_NAME%TYPE;
  V_TYPE2 V_TYPE%TYPE;
BEGIN
  V_TYPE:='REJWANUL REJA';
  V_TYPE2:='JUNAINAH YOUSRA ROHA';
  DBMS_OUTPUT.PUT_LINE(V_TYPE);
  DBMS_OUTPUT.PUT_LINE(V_TYPE2);
END;


-- 


set serveroutput on;
--set outputprint on;
set autorint on;

variable var_text varchar2(50);
variable var_text2 varchar2(50);  
declare
  v_text varchar2(50);
BEGIN
  :var_text :='Hello PL/SQL Varaible';
  :var_text2 :='this is new text';
  
  DBMS_OUTPUT.PUT_LINE('var value => '|| :var_text);
  v_text := :var_text;
  DBMS_OUTPUT.PUT_LINE(v_text);
END;
/
print :var_text2;

--in practical example..
variable v_employeeId number;

begin
  :v_employeeId := 100;
end;

select *from employees where employee_id = :v_employeeId;





